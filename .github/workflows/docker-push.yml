name: üöÄ Jenkins CI/CD with Docker & Auto-Rollback

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v3

      - name: ‚òÅÔ∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: üöÄ Start Jenkins EC2 Instance
        run: |
          echo "Starting EC2..."
          aws ec2 start-instances --instance-ids ${{ secrets.JENKINS_INSTANCE_ID }}
          aws ec2 wait instance-running --instance-ids ${{ secrets.JENKINS_INSTANCE_ID }}

      - name: ‚è≥ Wait for Jenkins to Boot
        run: sleep 60

      - name: üß© Trigger Jenkins Job and Capture Build Number
        id: trigger
        run: |
          echo "üîê Getting Jenkins crumb for CSRF protection..."
          CRUMB_JSON=$(curl -s --user "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/crumbIssuer/api/json")

          CRUMB=$(echo "$CRUMB_JSON" | jq -r .crumb)
          if [[ -z "$CRUMB" || "$CRUMB" == "null" ]]; then
            echo "‚ùå Failed to get Jenkins crumb. Full response:"
            echo "$CRUMB_JSON"
            exit 1
          fi

          echo "‚úÖ Crumb received: $CRUMB"
          echo "üöÄ Triggering Jenkins job: ${{ secrets.JENKINS_JOB_NAME }}"

          RESPONSE=$(curl -s -i -X POST "${{ secrets.JENKINS_URL }}/job/${{ secrets.JENKINS_JOB_NAME }}/buildWithParameters?DUMMY=true" \
          --user "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
          -H "Jenkins-Crumb: $CRUMB")


          echo "üì® Raw Jenkins response:"
          echo "$RESPONSE"

          QUEUE_URL=$(echo "$RESPONSE" | grep -i "^Location:" | awk '{print $2}' | tr -d '\r\n')
          echo "üìå Queued at: $QUEUE_URL"

          if [ -z "$QUEUE_URL" ]; then
            echo "‚ùå Could not get Jenkins queue URL. Check if job exists, is accessible, or needs parameters."
            exit 1
          fi

          echo "‚è≥ Waiting for Jenkins to assign a build number..."

          for i in {1..20}; do
            BUILD_JSON=$(curl -s --user "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" "${QUEUE_URL}api/json")
            EXECUTABLE_URL=$(echo "$BUILD_JSON" | jq -r '.executable.url // empty')
            if [[ -n "$EXECUTABLE_URL" ]]; then
              echo "‚úÖ Build started at: $EXECUTABLE_URL"
              BUILD_NUMBER=$(echo "$BUILD_JSON" | jq -r '.executable.number')
              echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "‚è≥ Waiting for build number..."
            sleep 5
          done

          echo "‚ùå Failed to retrieve Jenkins build number after 20 attempts."
          exit 1

      - name: üõ∞Ô∏è Poll Jenkins Build Result
        id: poll
        run: |
          echo "Polling Jenkins build #${{ steps.trigger.outputs.build_number }} for result..."
          for i in {1..30}; do
            JSON=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ secrets.JENKINS_JOB_NAME }}/${{ steps.trigger.outputs.build_number }}/api/json")
            BUILDING=$(echo "$JSON" | jq -r .building)
            STATUS=$(echo "$JSON" | jq -r .result)
            echo "BUILDING=$BUILDING | STATUS=$STATUS"
            if [[ "$BUILDING" == "false" && "$STATUS" != "null" ]]; then
              echo "result=$STATUS" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 10
          done
          echo "result=TIMEOUT" >> $GITHUB_OUTPUT
          exit 1

      - name: üîê DockerHub Login
        if: steps.poll.outputs.result == 'SUCCESS'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üê≥ Build & Push Docker Image
        if: steps.poll.outputs.result == 'SUCCESS'
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/inventoware-app
          TAG=$(git rev-parse --short HEAD)
          docker build -t $IMAGE:$TAG ./invento-app
          docker tag $IMAGE:$TAG $IMAGE:latest
          docker tag $IMAGE:$TAG $IMAGE:previous
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest
          docker push $IMAGE:previous

      - name: üîÅ Rollback on Failure
        if: steps.poll.outputs.result != 'SUCCESS'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üßØ Perform Rollback
        if: steps.poll.outputs.result != 'SUCCESS'
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/inventoware-app
          echo "Attempting rollback..."
          if docker pull $IMAGE:previous; then
            docker tag $IMAGE:previous $IMAGE:latest
            docker push $IMAGE:latest
            echo "Rollback successful."
          else
            echo "No previous image to roll back to."
          fi

      - name: üõë Stop Jenkins EC2 Instance
        if: always()
        run: |
          echo "Shutting down EC2 in 3 minutes..."
          sleep 180
          aws ec2 stop-instances --instance-ids ${{ secrets.JENKINS_INSTANCE_ID }}
          aws ec2 wait instance-stopped --instance-ids ${{ secrets.JENKINS_INSTANCE_ID }}
          echo "EC2 stopped ‚úÖ"

      - name: üìß Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: |
            ${{ steps.poll.outputs.result == 'SUCCESS' && '‚úÖ Jenkins Job Succeeded' || 'üö® Jenkins Job Failed or Timed Out' }}
          to: anuj.107126@stu.upes.ac.in,teknobot24@gmail.com,srvaibhav0@gmail.com,bhagwanani23@gmail.com,arjuncodeops@gmail.com
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          body: |
            ‚û§ Jenkins Job: ${{ secrets.JENKINS_JOB_NAME }}
            ‚û§ Status: ${{ steps.poll.outputs.result }}
            ‚û§ BuildNumber:${{ steps.trigger.outputs.build_number }}
            ‚û§ Public URL : invento-app-alb-882541320.eu-north-1.elb.amazonaws.com 
            ‚û§ EC2 has been safely stopped after the job.
